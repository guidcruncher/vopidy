export const CommandMap = {
  "core.commands": { import: "core-commands", help: "Output a list of available commands" },
  "core.ping": { import: "core-ping", help: "Check server health" },
  "core.soundcap": { import: "core-soundcap", help: "Check server sound capabilities" },
  "core.status": { import: "core-status", help: "Get playback status" },
  "auth.login": { import: "auth-login", help: "Login user", params: ["id"] },
  "auth.logout": { import: "auth-logout", help: "Logout user" },
  "auth.users": { import: "auth-users", help: "Get list user profiles" },
  "core.user": { import: "core-user", help: "Get logged in user profile" },
  "core.cache-stats": { import: "core-cache-stats", help: "Print cache statistics" },
  "core.cache-flush": { import: "core-cache-flush", help: "Flush the cache" },
  "core.config-get": { import: "core-config-get", help: "Get the current config" },
  "core.config-set": {
    import: "core-config-set",
    params: ["config"],
    help: " Saves the current config",
  },
  "snapcast.status": {
    import: "snapcast-status",
    help: "Get the current Snapcast Server state",
  },
  "snapcast.setvolume": {
    import: "snapcast-setvolume",
    help: "Set the Snapcast Client volume leve]",
    params: ["id", "muted", "level"],
  },
  "snapcast.setclientname": {
    import: "snapcast-setclientname",
    help: "Rename a given Snapcast Client",
    params: ["id", "name"],
  },
  "tts.speak": {
    import: "tts-speak",
    params: ["text", "lang"],
    help: "Use text to speech",
  },
  "tts.time": {
    import: "tts-time",
    params: ["lang"],
    help: "Use text to speech to say current time",
  },
  "player.play": {
    import: "player-play",
    params: ["source", "id"],
    help: "Start plaaying track from source",
  },
  "player.seek": {
    import: "player-seek",
    params: ["source", "position"],
    help: "Seeks current track to position in seconds.",
  },
  "player.history": { import: "player-history", help: "Get the playback history" },
  "player.history.popular": { import: "player-historypop", help: "List history by popularity" },
  "player.stop": { import: "player-stop", help: "Stop playback" },
  "player.pause": { import: "player-pause", help: "Pause playhack" },
  "player.resume": { import: "player-resume", help: "Resume playback" },
  "player.next": { import: "player-next", help: "Start playinjg next track" },
  "player.previous": { import: "player-previous", help: "Start playing previous track" },
  "mixer.output": { import: "mixer-output", help: "Get active source" },
  "mixer.mute": { import: "mixer-mute", help: "Mutes the current output" },
  "mixer.unmute": { import: "mixer-unmute", help: "Unmute the current output" },
  "mixer.setvolume": {
    import: "mixer-setvolume",
    params: ["level"],
    help: "Set volume to level ",
  },
  "tunein.browse": { import: "tunein-browse", params: ["id"], help: "Browse TuneIn catalog" },
  "tunein.categories": { import: "tunein-categories", help: "Get TpuneIn categories" },
  "tunein.describe": { import: "tunein-describe", params: ["id"], help: "Get TuneIn station" },
  "spotify.playlists": { import: "spotify-playlists", help: "Get Spotify Playlists" },
  "spotify.playlist": {
    import: "spotify-playlist",
    params: ["id", "offset", "limit"],
    help: "Gets a Spotify Playlist",
  },
  "spotify.albums": { import: "spotify-albums", help: "Get Spotify saved albums" },
  "spotify.artists": {
    import: "spotify-artists",
    help: "Gets a list of followed Spotify artists",
  },
  "spotify.artist": {
    import: "spotify-artist",
    params: ["id"],
    help: "Gets the specified Spotify artist",
  },
  "spotify.album": {
    import: "spotify-album",
    params: ["id"],
    help: "Gets the specified Spotify album",
  },
  "create.playlist": {
    import: "create-playlist",
    params: ["name", "uris"],
    help: "Create a playlist",
  },
  "spotify.shows": { import: "spotify-shows", help: "Get Spotify saved shows" },
  "spotify.show": {
    import: "spotify-show",
    params: ["id", "offset", "limit"],
    help: "Get a Spotify show",
  },
  "spotify.newreleases": { import: "spotify-newreleases", help: "Get Spotify New released albums" },
  "spotify.tracks": { import: "spotify-tracks", help: "Get Spotify saved tracks" },
  "spotify.queue": { import: "spotify-queue", help: "Get Spotify playback queue" },
  "spotify.describe": { import: "spotify-describe", params: ["id"], help: "Get Spotify item" },
  "spotify.doesfollow": { import: "spotify-doesfollow", params: ["type", "id"], help: "" },
  "spotify.follow": { import: "spotify-follow", params: ["type", "id"], help: "" },
  "spotify.unfollow": { import: "spotify-unfollow", params: ["type", "id"] },
  "spotify.artist.tracks": {
    import: "spotify-artist-tracks",
    params: ["id"],
    help: "Gets a list of the artists top tracks",
  },
  "spotify.artist.albums": {
    import: "spotify-artist-albums",
    params: ["id"],
    help: "Gets a list of the artists albums",
  },
  "stream.playlist": {
    import: "stream-playlist",
    params: ["url", "text"],
    help: "Gets the content of a given M3u playlist",
  },
  "stream.import": {
    import: "stream-import",
    params: ["url", "text", "name"],
    help: "Imports given M3u playlist",
  },
  "stream.browse": {
    import: "stream-browse",
    params: [],
    help: "Browse streams",
  },
  "stream.describe": {
    import: "streamd-describe",
    params: ["id"],
    help: "Get details of stream",
  },
  "bookmarks.browse": {
    import: "bookmarks-browse",
    params: [],
    help: "Get available bookmarks",
  },
  "bookmarks.create": {
    import: "bookmarks-create",
    params: ["source", "item"],
    help: "Add a new bookmark",
  },
  "bookmarks.delete": {
    import: "bookmarks-delete",
    params: ["source", "id"],
    help: "Delete a bookmark",
  },
  "search.keyword": {
    import: "search-keyword",
    params: ["catalog", "query", "offset", "limit"],
    help: "Performs a search",
  },
  "mixer.equaliser.get": {
    import: "mixer-equaliser-get",
    help: "Retrieves the current equaliser settings",
  },
  "mixer.equaliser.set": {
    import: "mixer-equaliser-set",
    help: "Sets the current equaliser settings",
    params: ["value"],
  },
  "mixer.equaliser.reset": {
    import: "mixer-equaliser-reset",
    help: "Resets the current equaliser settings",
    params: ["value"],
  },
  "radiobrowser.browse": {
    import: "radiobrowser-browse",
    params: ["name"],
    help: "Browse Radiobrowser catalog",
  },
  "radiobrowser.states": {
    import: "radiobrowser-states",
    params: ["code", "name"],
    help: "Browse Radiobrowser regions",
  },
  "radiobrowser.countries": {
    import: "radiobrowser-countries",
    params: [],
    help: "Browse Radiobrowser countries",
  },
  "library.browse": {
    import: "library-browse",
    params: ["dir"],
    help: "Browse Local music catalog",
  },
}
